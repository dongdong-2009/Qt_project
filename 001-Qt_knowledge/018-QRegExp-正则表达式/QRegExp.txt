14.3.2  正则表达式语法

    与字符串非常相似，正则表达式是一个字符的序列。然而，并非所有字符都只取字面意思。
    例如，尽管正则表达式中的一个'a' 可以和目标字符串中的'a'相匹配，但字符'.'则可以和任意字符相匹配。
    这里的'.'就称为元字符。另外一个常用的元字符是'*'，他可以用来说明目标字符串中可能存在零个或者多个
    能够与'*'前字符串相匹配的字符串。例如， 'a*'将可以和一行中任意数量(包括零个)的'a'相匹配。
    如下所示，有许多不同种类的元字符。
    
    1. 特殊字符
    .  匹配任何字符
    \n 匹配换行符
    \f 匹配换页符
    \t 匹配制表符
    \xhhhhh 匹配一个Unicode字符,其对应的码值是范围为0x0000到0xFFFF之间的一个十六进制数hhhh
    
    2. 量词---说明前面的字符(或字符组)在匹配的表达式中可以出现次数的修饰符。
    + 出现1次或者更多次
    ? 出现0次或1次
    * 出现0次或者多次
    {i,j} 出现至少i次但不超过j次
    
    3. 字符集 ---- 在匹配表达式指定位置允许出现的字符集合。其中还预定义了几个字符集合：
    \s 匹配任何空白符
    \S 匹配任何非空白符
    \d 匹配任何数字字符: 从'0' 到 '9'
    \D 匹配任何非数字符号
    \w 匹配任何 单词 字符， 也就是任意的字母，数字或者下划线
    \W 匹配任何非单词字符
    
    字符集也可以使用方括号指定:
    [AEIOU] 匹配这五个字符中的任意一个
    [a-g] 短线使此集合可匹配从'a' 到'g'字符
    [^xyz] 匹配任何除这三个字符以外的字符
    
    4. 分组和捕获字符---(圆括号)是可以用来把字符划分成组的特殊字符。字符组可以是后向引用的。
    也就是说，如果存在一个匹配，那么分组了的值将可以通过各种方式来捕获和访问。
    为简便起见，一般规定在一个正则表达式中最多可以引用9个分组，即使用\1 到 \9 这样的修饰符。
    此外还有一个QRegExp成员函数cap(int nth)，它返回第n个分组(基于QString形式返回)
    
    5. 锚点字符(Anchoring Character) ----- 确定尝试进行匹配操作的边界。
    脱字符(^), 如果它是正则表达式中的第一个字符，则说明匹配过程从字符串的开头处开始。
    美元符($)， 如果他是正则表达式的最后一个字符，则表明匹配过程直到字符串的结尾才会结束
    此外， 还有单词边界(\b) 断言或者非单词边界(\B)断言，有助于我们关注于正则表达式本身。
    
    
    例子：
    hello       匹配字面字符串hello
    c*at        量词:c出现零次或多次，at紧跟气候，例如：at，cat，ccat等等
    C?at        匹配C出现零次或者一次，之后紧跟at 仅at或者Cat
    c.t         c后面紧跟任意字符，其后面又紧跟t的字符串匹配，例如 cat,cot,c3t, c%t等
    c.*t        字符c后面紧跟0个或者多个任意字符，然后紧跟t,例如: ct, caaatttt, carsdf$#S8ft等
    ca+t        (量词) '+' 意味着前面的字符可以出现1次或者多次，因此符合条件的有cat, caat, caaaat等
    c\.\*t      反斜线在特殊字符之前将会 "使其转义" ,因此，只有字符串 "c.*t" 才匹配
    c\\\.t      只和字符串 "c\.t" 匹配
    c[0-9a-c]+z 在 c 和 z 之间有一个或者多个字符在集合[0-9a-c]之间，匹配的字符串类似 "c312abbaz" 和 "caa211bac2z"
    
    x|y         匹配x或y。例如，“z|food”能匹配“z”或“food”(此处请谨慎)。“[zf]ood”则匹配“zood”或“food”。
    the  (cat|dog)  ate (fish|mouse)
    (轮流交替)匹配的结果是 the cat ate the fish, the dog ate the mouse, the dog ate the the fish 或者
    the cat ate the mouse
    
    \w+         字母数字(单词字符)的序列，与[a-zA-Z0-9]+等价
    \W          非单词字符(标点符号，空白符号等)
    \s{5}       正好5个空白字符(制表符，空白符，换行符)
    ^\s+        匹配字符串开头处的一个或者多个空白字符
    \s+$        匹配字符串结尾处的一个或多个空白字符
    ^Help       如果Help出现在字符串的开头，就匹配它
    [^Help]     与字符串中任意地方(和元字符^的意思不一样)的除单词Help中任一字母之外的任意单个字符相匹配
    \S{1,5}     至少1个,至多5个非空白字符(可打印的字符)
    \d          一个数字[0-9](\D是一个非数字，也就是[^0-9])
    \d{3}-\d{4} 7位电话号码: 555-1234
    \bm[A-Z]\w+ \b代表单词边界,mBuffer匹配而StreameBuffer不匹配
    [xyz]       字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。
    {n,}        n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
    
    \b      匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
    
    \B      匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
    
    [a-z]       字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。
注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.

    [^a-z]      负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


