QElapsedTimer

QElapsedTimer()
qint64	elapsed() const
bool	hasExpired(qint64 timeout) const
void	invalidate()
bool	isValid() const
qint64	msecsSinceReference() const
qint64	msecsTo(const QElapsedTimer & other) const
qint64	nsecsElapsed() const
qint64	restart()
qint64	secsTo(const QElapsedTimer & other) const
void	start()
bool	operator!=(const QElapsedTimer & other) const
bool	operator==(const QElapsedTimer & other) const
Static Public Members

ClockType	clockType()
bool	isMonotonic()
Detailed Description

The QElapsedTimer class provides a fast way to calculate elapsed times.

The QElapsedTimer class is usually used to quickly calculate how much time has elapsed between two events. Its API is similar to that of QTime, so code that was using that can be ported quickly to the new class.

However, unlike QTime, QElapsedTimer tries to use monotonic clocks if possible. This means it's not possible to convert QElapsedTimer objects to a human-readable time.

The typical use-case for the class is to determine how much time was spent in a slow operation. The simplest example of such a case is for debugging purposes, as in the following example:

    QElapsedTimer timer;
    timer.start();

    slowOperation1();

    qDebug() << "The slow operation took" << timer.elapsed() << "milliseconds";
In this example, the timer is started by a call to start() and the elapsed timer is calculated by the elapsed() function.

The time elapsed can also be used to recalculate the time available for another operation, after the first one is complete. This is useful when the execution must complete within a certain time period, but several steps are needed. The waitFor-type functions in QIODevice and its subclasses are good examples of such need. In that case, the code could be as follows:

void executeSlowOperations(int timeout)
{
    QElapsedTimer timer;
    timer.start();
    slowOperation1();

    int remainingTime = timeout - timer.elapsed();
    if (remainingTime > 0)
        slowOperation2(remainingTime);
}
Another use-case is to execute a certain operation for a specific timeslice. For this, QElapsedTimer provides the hasExpired() convenience function, which can be used to determine if a certain number of milliseconds has already elapsed:

void executeOperationsForTime(int ms)
{
    QElapsedTimer timer;
    timer.start();

    while (!timer.hasExpired(ms))
        slowOperation1();
}
Reference Clocks

QElapsedTimer will use the platform's monotonic reference clock in all platforms that support it (see QElapsedTimer::isMonotonic()). This has the added benefit that QElapsedTimer is immune to time adjustments, such as the user correcting the time. Also unlike QTime, QElapsedTimer is immune to changes in the timezone settings, such as daylight saving periods.

On the other hand, this means QElapsedTimer values can only be compared with other values that use the same reference. This is especially true if the time since the reference is extracted from the QElapsedTimer object (QElapsedTimer::msecsSinceReference()) and serialised. These values should never be exchanged across the network or saved to disk, since there's no telling whether the computer node receiving the data is the same as the one originating it or if it has rebooted since.

It is, however, possible to exchange the value with other processes running on the same machine, provided that they also use the same reference clock. QElapsedTimer will always use the same clock, so it's safe to compare with the value coming from another process in the same machine. If comparing to values produced by other APIs, you should check that the clock used is the same as QElapsedTimer (see QElapsedTimer::clockType()).

32-bit overflows

Some of the clocks used by QElapsedTimer have a limited range and may overflow after hitting the upper limit (usually 32-bit). QElapsedTimer deals with this overflow issue and presents a consistent timing. However, when extracting the time since reference from QElapsedTimer, two different processes in the same machine may have different understanding of how much time has actually elapsed.

The information on which clocks types may overflow and how to remedy that issue is documented along with the clock types.

See also QTime and QTimer.

Member Type Documentation

enum QElapsedTimer::ClockType
This enum contains the different clock types that QElapsedTimer may use.

QElapsedTimer will always use the same clock type in a particular machine, so this value will not change during the lifetime of a program. It is provided so that QElapsedTimer can be used with other non-Qt implementations, to guarantee that the same reference clock is being used.

Constant	Value	Description
QElapsedTimer::SystemTime	0	The human-readable system time. This clock is not monotonic.
QElapsedTimer::MonotonicClock	1	The system's monotonic clock, usually found in Unix systems. This clock is monotonic and does not overflow.
QElapsedTimer::TickCounter	2	The system's tick counter, used on Windows systems. This clock may overflow.
QElapsedTimer::MachAbsoluteTime	3	The Mach kernel's absolute time (OS X and iOS). This clock is monotonic and does not overflow.
QElapsedTimer::PerformanceCounter	4	The high-resolution performance counter provided by Windows. This clock is monotonic and does not overflow.
SystemTime

The system time clock is purely the real time, expressed in milliseconds since Jan 1, 1970 at 0:00 UTC. It's equivalent to the value returned by the C and POSIX time function, with the milliseconds added. This clock type is currently only used on Unix systems that do not support monotonic clocks (see below).

This is the only non-monotonic clock that QElapsedTimer may use.

MonotonicClock

This is the system's monotonic clock, expressed in milliseconds since an arbitrary point in the past. This clock type is used on Unix systems which support POSIX monotonic clocks (_POSIX_MONOTONIC_CLOCK).

This clock does not overflow.

TickCounter

The tick counter clock type is based on the system's or the processor's tick counter, multiplied by the duration of a tick. This clock type is used on Windows platforms. If the high-precision performance counter is available on Windows, the PerformanceCounter clock type is used instead.

The TickCounter clock type is the only clock type that may overflow. Windows Vista and Windows Server 2008 support the extended 64-bit tick counter, which allows avoiding the overflow.

On Windows systems, the clock overflows after 2^32 milliseconds, which corresponds to roughly 49.7 days. This means two processes' reckoning of the time since the reference may be different by multiples of 2^32 milliseconds. When comparing such values, it's recommended that the high 32 bits of the millisecond count be masked off.

MachAbsoluteTime

This clock type is based on the absolute time presented by Mach kernels, such as that found on OS X. This clock type is presented separately from MonotonicClock since OS X and iOS are also Unix systems and may support a POSIX monotonic clock with values differing from the Mach absolute time.

This clock is monotonic and does not overflow.

PerformanceCounter

This clock uses the Windows functions QueryPerformanceCounter and QueryPerformanceFrequency to access the system's high-precision performance counter. Since this counter may not be available on all systems, QElapsedTimer will fall back to the TickCounter clock automatically, if this clock cannot be used.

This clock is monotonic and does not overflow.

See also clockType() and isMonotonic().

Member Function Documentation

QElapsedTimer::QElapsedTimer()
Constructs an invalid QElapsedTimer. A timer becomes valid once it has been started.

This function was introduced in Qt 5.4.

See also isValid() and start().

[static] ClockType QElapsedTimer::clockType()
Returns the clock type that this QElapsedTimer implementation uses.

See also isMonotonic().

qint64 QElapsedTimer::elapsed() const
Returns the number of milliseconds since this QElapsedTimer was last started. Calling this function in a QElapsedTimer that was invalidated will result in undefined results.

See also start(), restart(), hasExpired(), and invalidate().

bool QElapsedTimer::hasExpired(qint64 timeout) const
Returns true if this QElapsedTimer has already expired by timeout milliseconds (that is, more than timeout milliseconds have elapsed). The value of timeout can be -1 to indicate that this timer does not expire, in which case this function will always return false.

See also elapsed().

void QElapsedTimer::invalidate()
Marks this QElapsedTimer object as invalid.

An invalid object can be checked with isValid(). Calculations of timer elapsed since invalid data are undefined and will likely produce bizarre results.

See also isValid(), start(), and restart().

[static] bool QElapsedTimer::isMonotonic()
Returns true if this is a monotonic clock, false otherwise. See the information on the different clock types to understand which ones are monotonic.

See also clockType() and QElapsedTimer::ClockType.

bool QElapsedTimer::isValid() const
Returns false if the timer has never been started or invalidated by a call to invalidate().

See also invalidate(), start(), and restart().

qint64 QElapsedTimer::msecsSinceReference() const
Returns the number of milliseconds between last time this QElapsedTimer object was started and its reference clock's start.

This number is usually arbitrary for all clocks except the QElapsedTimer::SystemTime clock. For that clock type, this number is the number of milliseconds since January 1st, 1970 at 0:00 UTC (that is, it is the Unix time expressed in milliseconds).

See also clockType() and elapsed().

qint64 QElapsedTimer::msecsTo(const QElapsedTimer & other) const
Returns the number of milliseconds between this QElapsedTimer and other. If other was started before this object, the returned value will be negative. If it was started later, the returned value will be positive.

The return value is undefined if this object or other were invalidated.

See also secsTo() and elapsed().

qint64 QElapsedTimer::nsecsElapsed() const
Returns the number of nanoseconds since this QElapsedTimer was last started. Calling this function in a QElapsedTimer that was invalidated will result in undefined results.

On platforms that do not provide nanosecond resolution, the value returned will be the best estimate available.

This function was introduced in Qt 4.8.

See also start(), restart(), hasExpired(), and invalidate().

qint64 QElapsedTimer::restart()
Restarts the timer and returns the time elapsed since the previous start. This function is equivalent to obtaining the elapsed time with elapsed() and then starting the timer again with start(), but it does so in one single operation, avoiding the need to obtain the clock value twice.

Restarting the timer makes it valid again.

The following example illustrates how to use this function to calibrate a parameter to a slow operation (for example, an iteration count) so that this operation takes at least 250 milliseconds:

    QElapsedTimer timer;

    int count = 1;
    timer.start();
    do {
        count *= 2;
        slowOperation2(count);
    } while (timer.restart() < 250);

    return count;
See also start(), invalidate(), and elapsed().

qint64 QElapsedTimer::secsTo(const QElapsedTimer & other) const
Returns the number of seconds between this QElapsedTimer and other. If other was started before this object, the returned value will be negative. If it was started later, the returned value will be positive.

The return value is undefined if this object or other were invalidated.

See also msecsTo() and elapsed().

void QElapsedTimer::start()
Starts this timer. Once started, a timer value can be checked with elapsed() or msecsSinceReference().

Normally, a timer is started just before a lengthy operation, such as:

    QElapsedTimer timer;
    timer.start();

    slowOperation1();

    qDebug() << "The slow operation took" << timer.elapsed() << "milliseconds";
Also, starting a timer makes it valid again.

See also restart(), invalidate(), and elapsed().

bool QElapsedTimer::operator!=(const QElapsedTimer & other) const
Returns true if this object and other contain different times.

bool QElapsedTimer::operator==(const QElapsedTimer & other) const
Returns true if this object and other contain the same time.


